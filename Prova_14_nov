CREATE TABLE  ESCOLA(
escola_id INTEGER  PRIMARY KEY NOT NULL,
nome VARCHAR(200),
endereco VARCHAR(300),
telefone VARCHAR(15),
data_fundacao DATE
)

INSERT INTO escola(escola_id,nome,endereco,telefone,data_fundacao)
VALUES(1,'Escola ABC', 'Rua A, 123','1234-5678','2000-01-01'),
(2,'Escola XYZ','Avenida B, 456', '2345-6789', '2005-06-15'),
(3,'Escola 123', 'Praça C, 789', '3456-7890', '2010-09-20');

SELECT * FROM ESCOLA


CREATE TABLE tipo_funcionario(
tipo_id INTEGER  PRIMARY KEY NOT NULL,
descricao VARCHAR(200),
nivel INTEGER,
responsabilidade VARCHAR(200),
salario_base NUMERIC(7,2)
)

INSERT INTO tipo_funcionario(tipo_id,descricao,nivel,responsabilidade,salario_base) VALUES
(1,'Professor', 2, 'Ensinar', 3000.00),
(2,'Secretária', 1, 'Administrar documentação', 2500.00),
(3,'Serviços Gerais', 1, 'Manutenção e limpeza', 2000.00),
(4,'Diretor', 3, 'Gerenciar escola', 4000.00),
(5,'Bibliotecário', 2, 'Gerenciar biblioteca', 2800.00)

SELECT * FROM tipo_funcionario
 
CREATE TABLE funcionario(
funcionario_id INTEGER  PRIMARY KEY NOT NULL,
nome VARCHAR(200),
data_nascimento DATE,
tipo_id INTEGER,
escola_id INTEGER,
CONSTRAINT  FK_tipo_id FOREIGN key (tipo_id) REFERENCES tipo_funcionario(tipo_id),
CONSTRAINT FK_escola_id FOREIGN KEY (escola_id) REFERENCES escola(escola_id)
)  

INSERT into funcionario(funcionario_id,nome,data_nascimento,tipo_id,escola_id)  VALUES
(1,'Ana Costa', '1985-03-12', 4, 1),
(2,'Bruno Lima', '1990-04-20', 1, 1),
(3,'Carla Silva', '1988-07-15', 2, 1),
(4,'David Santos', '1975-12-25', 3, 1),
(5,'Eva Oliveira', '1982-05-10', 1, 2),
(6,'Fernando Sousa', '1980-11-30', 5, 2),
(7,'Gabriela Costa', '1993-06-22', 3, 2),
(8,'Hugo Almeida', '1987-09-08', 2, 2),
(9,'Isabela Martins', '1981-02-18', 1, 3),
(10,'João Pereira', '1992-03-25', 3, 3),
(11,'Karen Almeida', '1989-08-05', 2, 3),
(12,'Lucas Rodrigues', '1979-10-12', 5, 3),
(13,'Maria Fernandes', '1984-07-07', 1, 2),
(14,'Nina Gomes', '1991-12-01', 3, 2),
(15,'Otávio Pereira', '1990-04-25', 4, 3)

select * from funcionario

CREATE TABLE turma(
turma_id INTEGER  PRIMARY KEY NOT NULL,
nome VARCHAR(250),
ano VARCHAR(100),
nivel VARCHAR(200),
escola_id INTEGER,
FOREIGN KEY (escola_id) REFERENCES escola(escola_id)
)
 
INSERT INTO turma(turma_id,nome,ano,nivel,escola_id) VAlues
(1,'Turma 1A', 2024, '1º ano', 1),
(2,'Turma 2A', 2024, '2º ano', 1),
(3,'Turma 3A', 2024, '3º ano', 2),
(4,'Turma 4A', 2024, '4º ano', 2),
(5,'Turma 5A', 2024, '5º ano', 3),
(6,'Turma 6A', 2024, '6º ano', 3),
(7,'Turma 7A', 2024, '7º ano', 1)

select * from turma

CREATE TABLE aluno(
aluno_id INTEGER  PRIMARY KEY NOT NULL,
nome VARCHAR(200),
data_nascimento DATE,
turma_id INTEGER,
escola_id INTEGER,
CONSTRAINT FK_TURMA FOREIGN KEY (turma_id) REFERENCES turma(turma_id),
CONSTRAINT FK_ESCOLA FOREIGN KEY (escola_id)  REFERENCES  escola(escola_id)
)


INSERT INTO aluno (aluno_id,nome,data_nascimento,turma_id,escola_id) VALUES
(1,'Alice Silva', '2012-01-15', 1, 1),
(2,'Bruno Costa', '2011-02-20', 1, 1),
(3,'Carla Lima', '2010-03-25', 2, 1),
(4,'Daniela Oliveira', '2011-04-30', 2, 1),
(5,'Eduardo Santos', '2012-05-15', 3, 1),
(6,'Fernanda Almeida', '2010-06-20', 3, 1),
(7,'Gabriel Pereira', '2011-07-25', 4, 1),
(8,'Heloísa Martins', '2012-08-10', 4, 2),
(9,'Igor Souza', '2011-09-15', 5, 2),
(10,'Júlia Gomes', '2010-10-20', 6, 2),
(11,'Kaique Costa', '2012-11-25', 6, 2),
(12,'Larissa Oliveira', '2011-12-30', 7, 2),
(13,'Mariana Fernandes', '2010-01-10', 5, 3),
(14,'Nicolas Santos', '2011-02-15', 5, 3),
(15,'Olivia Costa', '2012-03-20', 6, 3),
(16,'Pedro Almeida', '2010-04-25', 6, 3),
(17,'Quésia Lima', '2011-05-30', 7, 3),
(18,'Rafael Pereira', '2012-06-15', 7, 3),
(19,'Sofia Silva', '2010-07-20', 7, 3),
(20,'Tiago Souza', '2012-08-25', 7, 3)

CREATE TABLE disciplina (
    disciplina_id SERIAL PRIMARY KEY,   -- Identificador único da disciplina
    nome VARCHAR(100) NOT NULL,         -- Nome da disciplina (ex: Matemática)
    carga_horaria INTEGER NOT NULL      -- Carga horária da disciplina em horas
);

INSERT INTO disciplina(nome, carga_horaria) VALUES
('Mátemática', 180),
('Física', 160),
('Química', 120),
('Biologia', 150),
('História', 100),
('Geografia', 90),
('Literatura', 110),
('Filosofia', 80),
('Sociologia', 70),
('Artes', 60),
('Inglês', 200),
('Espanhol', 130),
('Educação Física', 180),
('Música', 140),
('Informática', 160);

SELECT * FROM disciplina


CREATE TABLE horario_aula (
    horario_id SERIAL PRIMARY KEY,      -- Identificador único do horário
    turma_id INTEGER NOT NULL,          -- Referência à turma
    disciplina_id INTEGER NOT NULL,     -- Referência à disciplina
    dia_semana VARCHAR NOT NULL,    -- Dia da semana (ex: "Segunda-feira")
    horario_inicio TIME NOT NULL,       -- Hora de início da aula
    horario_fim TIME NOT NULL,          -- Hora de término da aula
    CONSTRAINT FK_turma_id FOREIGN KEY (turma_id) REFERENCES turma(turma_id),
    CONSTRAINT FK_disciplina_id FOREIGN KEY (disciplina_id) REFERENCES disciplina(disciplina_id)
);
-- Inserir horários de aula para diferentes turmas e disciplinas
INSERT INTO horario_aula (turma_id, disciplina_id, dia_semana, horario_inicio, horario_fim)
VALUES
(1, 3, 'Segunda-feira', '08:00:00', '10:00:00'),  -- Turma 1, Disciplina 3, Segunda-feira
(2, 1, 'Terça-feira', '10:30:00', '12:30:00'),   -- Turma 2, Disciplina 1, Terça-feira
(3, 5, 'Quarta-feira', '13:00:00', '15:00:00'),  -- Turma 3, Disciplina 5, Quarta-feira
(4, 2, 'Quinta-feira', '08:30:00', '10:30:00'),  -- Turma 4, Disciplina 2, Quinta-feira
(5, 4, 'Sexta-feira', '15:30:00', '17:30:00'),   -- Turma 5, Disciplina 4, Sexta-feira
(2, 6, 'Segunda-feira', '18:00:00', '20:00:00'); -- Turma 2, Disciplina 6, Segunda-feira

SELECT * FROM horario_aula

-- Crie uma tabela de registros de presença para armazenar a frequência dos alunos.-------------------
CREATE TABLE presenca ( 
presenca_id SERIAL PRIMARY KEY, 
aluno_id INTEGER NOT NULL, turma_id INTEGER NOT NULL, 
disciplina_id INTEGER NOT NULL, data DATE NOT NULL, 
presente BOOLEAN NOT NULL, 
CONSTRAINT FK_aluno FOREIGN KEY (aluno_id) REFERENCES aluno(aluno_id), 
CONSTRAINT FK_turma FOREIGN KEY (turma_id) REFERENCES turma(turma_id), 
CONSTRAINT FK_disciplina FOREIGN KEY (disciplina_id) REFERENCES disciplina(disciplina_id) 
); 
-- Exemplo de inserção de registros na tabela de presença 
INSERT INTO presenca (aluno_id, turma_id, disciplina_id, data, presente) VALUES 
(1, 1, 1, '2024-11-01', TRUE), 
(2, 1, 1, '2024-11-01', FALSE), 
(3, 2, 2, '2024-11-01', TRUE); 
-- Selecionando todos os registros da tabela de presença
 SELECT * FROM presenca;
 


-- Crie uma tabela de avaliações escolar para registrar as notas dos alunos.

CREATE TABLE avaliacao (
    avaliacao_id SERIAL PRIMARY KEY,
    aluno_id INTEGER NOT NULL,
    turma_id INTEGER NOT NULL,
    disciplina_id INTEGER NOT NULL,
    data DATE NOT NULL,
    nota NUMERIC(5, 2) NOT NULL,
    descricao VARCHAR(200),
    CONSTRAINT FK_aluno FOREIGN KEY (aluno_id) REFERENCES aluno(aluno_id),
    CONSTRAINT FK_turma FOREIGN KEY (turma_id) REFERENCES turma(turma_id),
    CONSTRAINT FK_disciplina FOREIGN KEY (disciplina_id) REFERENCES disciplina(disciplina_id)
);


-- Exemplo de inserção de registros na tabela de avaliações
INSERT INTO avaliacao (aluno_id, turma_id, disciplina_id, data, nota, descricao) VALUES
(1, 1, 1, '2024-11-01', 8.5, 'Prova de Matemática'),
(2, 1, 1, '2024-11-01', 7.0, 'Prova de Matemática'),
(3, 2, 2, '2024-11-02', 9.0, 'Prova de Ciências');


-- Selecionando todos os registros da tabela de avaliações
SELECT * FROM avaliacao;


-- Crie uma tabela de  histórico para registrar detalhes sobre a vida acadêmica 
--do aluno, como atestados,resultados finais, participações em eventos, etc.
CREATE TABLE historico_escolar(
id_historico Serial primary key,
aluno_id INTEGER NOT NULL, 
data_historico DATE NOT NULL, 
explicacao varchar,
CONSTRAINT FK_aluno FOREIGN KEY (aluno_id) REFERENCES aluno(aluno_id)
)

INSERT INTO historico_escolar(aluno_id, data_historico, explicacao) VALUES
(5, '12/08/2024', 'Aluno brigou na escola'),
(8, '11/25/2024','Aluno liberado para casa');

SELECT*FROM historico_escolar

-- Insira 5 registros na tabela Presenca com informações fictícias.
INSERT INTO presenca (aluno_id, turma_id, disciplina_id, data, presente) VALUES 
(16, 6, 1, '2024-11-01', TRUE), 
(7, 2, 1, '2024-11-01', FALSE),
(18, 1, 1, '2024-11-01', TRUE), 
(10, 3, 1, '2024-11-01', FALSE),
(5, 4, 2, '2024-11-01', FALSE); 
SELECT * FROM presenca

-- Adicione 5 tipos diferentes de funcionários na tabela tipo_funcionario.

INSERT INTO tipo_funcionario(tipo_id,descricao,nivel,responsabilidade,salario_base) VALUES
(6,'Faxineira', 2, 'Limpar', 3000.00),
(7,'Merendeira', 1, 'Cozinhar', 2500.00),
(8,'Agente de pátio', 1, 'Vigiar os alunos e a escola', 2000.00),
(9,'Vice-diretor', 3, 'Gerenciar professores e assuntos da escola', 4000.00),
(10,'Tesoureiro', 2, 'Gerenciar as finanças da escola', 2800.00);

SELECT * FROM tipo_funcionario

-- Insira 5 registros na tabela funcionario relacionados às escolas e tipos de funcionários já inseridos.

INSERT INTO funcionario(funcionario_id,nome,data_nascimento,tipo_id,escola_id) VALUES
(16,'Jucicleiton Gonsalves', '2000-09-17', 9, 3),
(17, 'Zacarias Dorpero', '1999-12-30', 7, 2),
(18,'Shelslyanderson Righlander', '1989-06-15', 10, 1),
(19,'Carla Algustina', '1992-02-29', 8, 3),
(20,'Mario Salesino', '1998-08-31', 6, 2);

SELECT * FROM funcionario

-- Atualize o endereço da escola com id  1 específica na tabela Escola.


-- Altere o nível de um tipo de funcionário na tabela tipo_funcionario.


-- Modifique o salário base de todos os funcionários com nível acima de 2 na tabela tipo_funcionario.


-- Renomeie a coluna telefone da tabela ESCOLA para contato_telefone.


-- Renomeie a tabela funcionario_escala para escala_funcionario.


-- Altere o tipo da coluna ano na tabela turma para INTEGER.


-- Adicione uma coluna email na tabela aluno.


-- Crie um procedimento que insira um novo funcionário na tabela funcionario.


-- Crie um procedimento que atualize o salário de um tipo de funcionário baseado em um percentual fornecido.


-- Crie um procedimento que apague registros antigos da tabela escala com mais de 5 anos.


-- Crie uma função que retorne uma lista de alunos de uma turma específica usando um loop FOR.


-- Crie uma função que receba um escola_id e retorne o nome da escola e a quantidade de funcionários registrados.


-- Crie uma função que retorne o salário médio dos funcionários de uma escola específica.


-- Selecione os funcionários com salário acima da média da escola onde trabalham.


-- Liste os nomes dos alunos que estão em turmas onde o nível da turma é o mesmo do tipo de funcionário responsável.


-- Encontre as escolas que têm mais de 10 funcionários associados.


-- Selecione as escolas que têm mais de 5 turmas.


-- Mostre os tipos de funcionários com salário médio superior a R$ 3000,00.


-- Liste as turmas onde a quantidade de alunos é superior a 20.


-- Agrupe os funcionários por tipo_id e mostre a média salarial de cada tipo.


-- Agrupe os alunos por turma_id e mostre a quantidade de alunos por turma.


-- Liste a quantidade de funcionários por escola agrupada por escola_id.
